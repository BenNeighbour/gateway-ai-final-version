name: Run next.js tests

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  NODE_VERSION: 18.17.1
  PNPM_VERSION: 8.9.0
  NEXT_REPO: vercel/next.js
  NEXT_TEST_MODE: deploy
  NEXT_JUNIT_TEST_REPORT: true
  TEST_CONCURRENCY: 8
  NEXT_E2E_TEST_TIMEOUT: 600000
  NEXT_TELEMETRY_DISABLED: 1
  NEXT_SKIP_NATIVE_POSTINSTALL: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: 1d5a5c76-d445-4ae5-b694-b0d3f2e2c395
  NEXT_TEST_CONTINUE_ON_ERROR: 1
  next-path: next.js
  runtime-path: next-runtime-minimal
jobs:
  e2e:
    if:
      ${{ github.event_name == ('workflow_dispatch' || 'workflow_call') ||
      contains(github.event.pull_request.labels.*.name, 'run-e2e-tests') }}
    name: Test group ${{ matrix.group }}/24
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        group:
          [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]

    steps:
      - name: Get Latest Next.js Release
        id: next-release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/vercel/next.js/releases/latest | jq -r .tag_name)
          echo "Latest release tag is $LATEST_RELEASE"
          echo "tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: checkout Next.js repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.NEXT_REPO }}
          path: ${{ env.next-path }}
          ref: ${{ steps.next-release.outputs.tag }}

      - name: checkout runtime repo
        uses: actions/checkout@v4
        with:
          path: ${{ env.runtime-path }}

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: setup pnpm/yarn
        run: corepack enable

      - name: get pnpm store
        id: pnpm-store
        run: echo "PATH=$(pnpm store path --silent)" >> ${GITHUB_OUTPUT}

      - name: cache pnpm deps
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-store.outputs.PATH }}
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-

      - name: get npm cache
        id: npm-cache
        run: echo "PATH=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: cache npm deps
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache.outputs.PATH }}
          key: node-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-cache-

      - name: patch Next.js
        run: |
          cp ../${{ env.runtime-path }}/tests/netlify-deploy.ts test/lib/next-modes/
          git apply ../${{ env.runtime-path }}/tests/e2e-utils.patch
        working-directory: ${{ env.next-path }}

      - name: install Next.js
        run: pnpm install
        working-directory: ${{ env.next-path }}

      - name: build Next.js
        run: pnpm build
        working-directory: ${{ env.next-path }}

      - name: install swc
        run: pnpm add --workspace-root @next/swc-linux-x64-gnu@${{ env.NEXT_VERSION }}
        working-directory: ${{ env.next-path }}

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          # Should match the `DENO_VERSION_RANGE` from https://github.com/netlify/edge-bundler/blob/main/node/bridge.ts#L17
          deno-version: v1.37.0

      - name: install runtime
        run: npm install --ignore-scripts
        working-directory: ${{ env.runtime-path }}

      - name: build runtime
        run: npm run build
        working-directory: ${{ env.runtime-path }}

      - name: add netlify cli
        run: npm install -g netlify-cli

      - name: install playwright
        run: npx playwright install
        working-directory: ${{ env.next-path }}

      - name: run tests
        env:
          NODE_ENV: production
          NEXT_EXTERNAL_TESTS_FILTERS: ../next-runtime-minimal/tests/netlify-e2e.json
        run: node run-tests.js -g ${{ matrix.group }}/24 -c ${TEST_CONCURRENCY} --type e2e
        working-directory: ${{ env.next-path }}

      - name: Upload Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (${{ matrix.group }})
          path: ${{ env.next-path }}/test/test-junit-report/*.xml
  publish-test-results:
    name: 'E2E Test Summary'
    needs: e2e
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      issues: read
    if: success() || failure()

    steps:
      - name: checkout runtime repo
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v1

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Test Report
        if: success() || failure()
        run: |
          deno run -A tools/deno/junit2md.ts artifacts >> $GITHUB_STEP_SUMMARY
