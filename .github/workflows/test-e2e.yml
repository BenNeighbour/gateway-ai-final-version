name: Run Next.js repo tests

on:
  workflow_call:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * *' # Run every day at 3am UTC
  workflow_dispatch:
    inputs:
      versions:
        description: 'The versions of Next.js to test against (quoted and comma separated)'
        required: false
        default: "\"latest\""
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 18.17.1
  PNPM_VERSION: 8.9.0
  NEXT_REPO: vercel/next.js
  NEXT_TEST_MODE: deploy
  NEXT_JUNIT_TEST_REPORT: true
  # In older versions of Next.js both of these need to be set to enable junit reporting
  DATADOG_TRACE_NEXTJS_TEST: true
  DATADOG_API_KEY: foo
  TEST_CONCURRENCY: 2
  NEXT_E2E_TEST_TIMEOUT: 300000
  NEXT_TELEMETRY_DISABLED: 1
  NEXT_SKIP_NATIVE_POSTINSTALL: 1
  TURBO_API: ${{ secrets.TURBO_API }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: next-runtime-minimal
  TURBO_TEAMID: team_netlify
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: 1d5a5c76-d445-4ae5-b694-b0d3f2e2c395
  NEXT_TEST_CONTINUE_ON_ERROR: 1
  next-path: next.js
  runtime-path: next-runtime-minimal
jobs:
  setup:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-e2e-tests')) }}
    outputs:
      version: ${{ steps.set-matrix.outputs.version }}
      group: ${{ steps.set-matrix.outputs.group }}
      total: ${{ steps.set-matrix.outputs.total }}
    steps:

      - name: Set Next.js versions to test
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo 'version=[${{ github.event.inputs.versions }}]' >> $GITHUB_OUTPUT
            echo "group=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]" >> $GITHUB_OUTPUT
            echo "total=12" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "version=[\"latest\"]" >> $GITHUB_OUTPUT
            echo "group=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]" >> $GITHUB_OUTPUT
            echo "total=12" >> $GITHUB_OUTPUT
          else
            echo "version=[\"canary\",\"latest\",\"13.5.1\"]" >> $GITHUB_OUTPUT
            echo "group=[1, 2, 3, 4]" >> $GITHUB_OUTPUT
            echo "total=4" >> $GITHUB_OUTPUT
          fi
  e2e:
    needs: setup
    runs-on: ubuntu-latest
    name: Test next@${{ matrix.version }} group ${{ matrix.group }}/${{ needs.setup.outputs.total }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.setup.outputs.version) }}
        group: ${{ fromJson(needs.setup.outputs.group) }}

    outputs:
      tag: ${{ steps.next-release.outputs.tag }}

    steps:
      - name: Get Latest Next.js Release
        id: next-release
        run: |
          if [ "${{ matrix.version }}" == "latest" ]; then
            LATEST_RELEASE_TAG=$(curl -s https://api.github.com/repos/vercel/next.js/releases/latest | jq -r .tag_name)
            echo "Latest release tag is $LATEST_RELEASE_TAG"
            echo "tag=$LATEST_RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "version=$(npm view next@latest version)" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.version }}" == "canary" ]; then
            LATEST_CANARY_TAG=$(curl -s https://api.github.com/repos/vercel/next.js/releases | jq -r '.[] | select(.prerelease == true) | .tag_name' | head -n 1)
            echo "Latest canary tag is $LATEST_CANARY_TAG"
            echo "tag=$LATEST_CANARY_TAG" >> $GITHUB_OUTPUT
            echo "version=$(npm view next@canary version)" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ matrix.version }}" >> $GITHUB_OUTPUT
            echo "version=$(npm view next@${{ matrix.version }} version)" >> $GITHUB_OUTPUT
          fi
      - name: checkout Next.js repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.NEXT_REPO }}
          path: ${{ env.next-path }}
          ref: ${{ steps.next-release.outputs.tag }}

      - name: checkout runtime repo
        uses: actions/checkout@v4
        with:
          path: ${{ env.runtime-path }}

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: setup pnpm/yarn
        run: corepack enable

      - name: get pnpm store
        id: pnpm-store
        run: echo "PATH=$(pnpm store path --silent)" >> ${GITHUB_OUTPUT}

      - name: cache pnpm deps
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.PATH }}
          key: pnpm-store-${{ hashFiles('next.js/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-

      - name: get npm cache
        id: npm-cache
        run: echo "PATH=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: cache npm deps
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache.outputs.PATH }}
          key: node-cache-${{ hashFiles('next-runtime-minimal/package-lock.json') }}
          restore-keys: |
            node-cache-

      - name: patch Next.js
        run: |
          cp ../${{ env.runtime-path }}/tests/netlify-deploy.ts test/lib/next-modes/
          git apply ../${{ env.runtime-path }}/tests/e2e-utils.patch
        working-directory: ${{ env.next-path }}

      - name: install Next.js
        run: pnpm install
        working-directory: ${{ env.next-path }}

      - name: build Next.js
        run: pnpm build
        working-directory: ${{ env.next-path }}

      - name: install swc
        run: pnpm add --workspace-root @next/swc-linux-x64-gnu@${{ steps.next-release.outputs.version }}
        working-directory: ${{ env.next-path }}

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          # Should match the `DENO_VERSION_RANGE` from https://github.com/netlify/edge-bundler/blob/main/node/bridge.ts#L17
          deno-version: v1.37.0

      - name: install runtime
        run: npm install --ignore-scripts
        working-directory: ${{ env.runtime-path }}

      - name: build runtime
        run: npm run build
        working-directory: ${{ env.runtime-path }}

      - name: add netlify cli
        run: npm install -g netlify-cli

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ${{ env.next-path }}

      - name: Get test filters
        id: test-filters
        run: |
          # This is when the manifest version was changed
          if [ `npx semver -p -r ">=14.0.4-canary.26" ${{ steps.next-release.outputs.version }}` ]; then
            echo "filters=../next-runtime-minimal/tests/netlify-e2e.cjs" >> $GITHUB_OUTPUT
            echo "skip-retry=../next-runtime-minimal/tests/e2e-skip-retry.json" >> $GITHUB_OUTPUT
          else
            echo "filters=../next-runtime-minimal/tests/netlify-e2e-legacy.json" >> $GITHUB_OUTPUT
            echo "skip-retry=../next-runtime-minimal/tests/e2e-skip-retry-legacy.json" >> $GITHUB_OUTPUT
          fi

      - name: run tests
        env:
          NODE_ENV: production
          NEXT_EXTERNAL_TESTS_FILTERS: ${{ steps.test-filters.outputs.filters }}
          NEXT_TEST_SKIP_RETRY_MANIFEST: ${{ steps.test-filters.outputs.skip-retry }}
        run: node run-tests.js -g ${{ matrix.group }}/${{ needs.setup.outputs.total }} -c ${TEST_CONCURRENCY} --type e2e --timings
        working-directory: ${{ env.next-path }}

      - name: Upload Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-result-${{matrix.version}}-${{ matrix.group }}
          path: ${{ env.next-path }}/test/test-junit-report/*.xml
  publish-test-results:
    name: 'E2E Test Summary (${{matrix.version}})'
    needs:
      - e2e
      - setup
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      issues: read
    if: success() || failure()
    strategy:
      matrix:
        version: ${{ fromJson(needs.setup.outputs.version) }}

    steps:
      - name: checkout runtime repo
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v1

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-${{matrix.version}}-*
          path: artifacts

      - name: Publish Test Report
        id: publish-test-results
        if: success() || failure()
        run: |
          deno run -A tools/deno/junit2md.ts artifacts >> $GITHUB_STEP_SUMMARY
          echo "slackEvent<<NETLIFY_EOF" >> $GITHUB_OUTPUT
          deno run -A tools/deno/junit2slack.ts --dir artifacts --version ${{matrix.version}} --runUrl ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}} >> $GITHUB_OUTPUT
          echo "NETLIFY_EOF" >> $GITHUB_OUTPUT
          deno run -A tools/deno/junit2json.ts artifacts > report/test-results.json
      - name: Upload Test JSON
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.version}}-test-results.json
          path: report/test-results.json
      - name: Notify Slack
        if: success() || failure()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: ${{ steps.publish-test-results.outputs.slackEvent }}

      - name: Publish test site
        if: (success() || failure()) && matrix.version == 'latest' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          deno run -A tools/deno/junit2html.ts artifacts ${{needs.e2e.outputs.tag}} > report/index.html
          npx --yes netlify-cli@latest deploy --prod --cwd report
